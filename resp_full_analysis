clear all; % Clear workspace

% Load full BGC model output 
load('CTL_He_PCO_Gamma0_kl12h_O5_POC2DIC_GM15_Nowicki_npp1_aveTeu_diffSig_O2C_uniEta_DICrmAnthro_2L_Pnormal_DIP1e+00_DIC1e+00_DOC1e+00_ALK1e+00_O21e+00.mat');
full_oxygen_model = data.O2;
full_POC_model = data.POC;
full_DOC_model = data.DOC;
% load('Cexp_CAFE_kl24h.mat');
% F1000_full_model = EXP.POC1000; % F100_full_model = EXP.POC100 + EXP.lDOC100 + EXP.sDOC100;
% F110_full_model = EXP.TOC110;   % mmol m-2 year-1

% Load regridded WOA data
load('O2_WOA_regrid_mn.mat');
% Load OCIM output
load('CTL.mat');

grd = output.grid; % Grid structure
msk = output.M3d; % 3D ocean mask
msk_PAC = output.MSKS.PAC; % Pacific Ocean mask
iwet = find(msk(:)); % Indices of ocean points
i_surf = find(msk(:,:,1) == 0); % Surface Mask
nwet = length(iwet); % Number of ocean points
spa = 365.25 * 24 * 60^2; % Seconds in a year
TRdiv = -output.TR / spa; % Transport matrix (s⁻¹)

% Set up parameters
par.TRdiv = TRdiv; % Transport matrix
par.iwet = iwet; par.nwet = nwet; par.grd = grd; par.msk = msk;
dAt = grd.DXT3d .* grd.DYT3d; % Grid box area

% Temperature and salinity
temp = msk; temp(iwet) = output.T; par.temp = temp;
salt = msk; salt(iwet) = output.S; par.sal = salt;

% Load gas transfer velocity and atmospheric pressure
tempdata = load('tempPC_C13_C14_1850_frac_0.6');
par.kw = tempdata.par.kw; % Gas transfer velocity
par.atm_pres = tempdata.par.P; % Atmospheric pressure

load('b_opt_feb.mat'); load('A_opt_feb.mat'); load('z_ref_opt_feb.mat');
load('opt_params_v2.mat'); 

% Initialize parameters for remineralization
par.z_ref = z_ref_opt_feb; % Initial guess for reference depth (~100m)
par.b = b_opt_feb; % Exponent
par.A = A_opt_feb; % Scaling constant
par.zw = grd.zw;
par.msk = msk;

%% Optimization Process

% Initial guess for parameters: using previous optimized values
initial_guess = [b_opt_feb, A_opt_feb*3, -100];

% Bounds for parameters
lb = [0.1, 0, -grd.zt(4)]; % Lower bounds for b, A, z_ref
ub = [1.5, 1, -grd.zt(2)]; % Upper bounds for b, A, z_ref

% Optimization options
%options = optimset('Display', 'iter', 'TolFun', 1e-6); % v1
options = optimset('Display', 'iter', 'TolFun', 1e-8, 'TolX', 1e-8); % v2

% Objective function to minimize
obj_fun = @(params) oxygen_model_optim(params, par, O2_WOA_regrid_mn, iwet);

% Perform optimization
[opt_params, opt_mse] = fmincon(obj_fun, initial_guess, [], [], [], [], lb, ub, [], options);

%[opt_params, opt_mse] = fminunc(obj_fun, initial_guess, [], [], [], [], lb, ub, [], options);

% v3 below
% options = optimset('Display', 'iter', ...
%                    'TolFun', 1e-8, ...
%                    'TolX', 1e-8, ...
%                    'MaxIter', 5000, ...
%                    'MaxFunEvals', 10000, ...
%                    'Algorithm', 'sqp');
% 
% initial_guess = [b_opt_feb, A_opt_feb*3, -100]; % Adjusted guess try * 1.5, -120
% lb = [0.1, 0, -grd.zt(4)]; % Adjusted lower bounds
% ub = [1.5, 1, -grd.zt(2)]; % Adjusted upper bounds

% Extract optimal values
b_opt = opt_params(1);
A_opt = opt_params(2);
z_ref_opt = opt_params(3);

% update par structure with reoptimized values
par.A = A_opt;
par.b = b_opt;
par.z_ref = z_ref_opt; %note: in re-optimization, something about A maybe, inital guess not within reasonable lb and ub
opt_params_v2 = [par.A;par.b;par.z_ref];

%% Run the oxygen model 
par.A = opt_params_v2(1);
par.b = opt_params_v2(2);
par.z_ref = opt_params_v2(3);
[f, Rz, J] = O2_model_with_remin(par);
dO = par.msk + NaN;
dO(iwet) = J \ f;

% Ensure dry points are NaNs
iwet = find(msk(:)); % Indices of ocean points
O2_WOA_regrid_mn(~iwet) = NaN;
full_oxygen_model(~iwet) = NaN;

%instead, make our a whole nans thing then assign iwet
OUR = Rz .* dO; % Compute OUR
OUR(~iwet) = NaN;
dVt = dAt .* grd.DZT3d;

%% Figures

% Define depth levels to be plotted
depth_indices = [2, 5, 8, 11, 14, 17]; % Indices of depth levels to plot
depths = grd.zt(depth_indices); % Depths in meters corresponding to these indices
num_depths = length(depth_indices);

% Create oxygen maps by depth with 2 columns (WOA vs. Optimized Model)
figure
for i = 1:num_depths
    % Column 1: WOA Observational Data
    subplot(num_depths, 2, (i-1)*2 + 1);
    contourf(O2_WOA_regrid_mn(:, :, depth_indices(i)));
    title(['WOA Observed O2 (', num2str(depths(i)), ' m)']);
    colorbar; 
    clim([0 350]);

    % Column 2: Optimized Model
    subplot(num_depths, 2, (i-1)*2 + 2);
    contourf(dO(:, :, depth_indices(i)));
    title(['Optimized Modeled O2 (', num2str(depths(i)), ' m)']);
    colorbar; 
    clim([0 350]);
end
sgtitle('Comparison of Observed and Modeled Oxygen Concentrations Across Depths (mmol/m^3)');

% % Plot global average profile of Oxygen Utilization Rate
% figure
% OUR_depth_profile = squeeze(mean(-Rz,[1 2],'omitnan'));
% 
% plot(OUR_depth_profile, -grd.zt);
% title('Oxygen Utilization Rate (mmol/m^3/s)');

%% Compute Volume-Weighted Spatial Correlations with WOA Data
for i = 1
O2_WOA_vec = O2_WOA_regrid_mn(:);
dO_vec = dO(:);
full_oxygen_vec = full_oxygen_model(:);
dVt_vec = dVt(:);

% Normalize volume weights (so they sum to 1)
dVt_norm = dVt_vec / sum(dVt_vec, 'omitnan');

% Compute weighted mean
mean_WOA = sum(dVt_norm .* O2_WOA_vec, 'omitnan');
mean_dO = sum(dVt_norm .* dO_vec, 'omitnan');
mean_full = sum(dVt_norm .* full_oxygen_vec, 'omitnan');

% Compute weighted standard deviation
std_WOA = sqrt(sum(dVt_norm .* (O2_WOA_vec - mean_WOA).^2, 'omitnan'));
std_dO = sqrt(sum(dVt_norm .* (dO_vec - mean_dO).^2, 'omitnan'));
std_full = sqrt(sum(dVt_norm .* (full_oxygen_vec - mean_full).^2, 'omitnan'));

% Compute weighted correlation
weighted_corr_optimized = sum(dVt_norm .* ((O2_WOA_vec - mean_WOA) .* (dO_vec - mean_dO)), 'omitnan') / (std_WOA * std_dO);
weighted_corr_fullBGC = sum(dVt_norm .* ((O2_WOA_vec - mean_WOA) .* (full_oxygen_vec - mean_full)), 'omitnan') / (std_WOA * std_full);

% Compute relative improvement in correlation
relative_corr_improvement = ((weighted_corr_optimized - weighted_corr_fullBGC) / weighted_corr_fullBGC) * 100;

fprintf('Global Volume-Weighted Correlation (WOA vs Full BGC Model): %.3f\n', weighted_corr_fullBGC);
fprintf('Global Volume-Weighted Correlation (WOA vs Optimized Model): %.3f\n', weighted_corr_optimized);
fprintf('Relative Improvement in Correlation: %.2f%%\n', relative_corr_improvement);

% Compute Global Oxygen Inventory (Total Oxygen Content in mmol)
total_oxygen_WOA = sum(O2_WOA_regrid_mn(:) .* dVt(:), 'omitnan');
total_oxygen_optimized = sum(dO(:) .* dVt(:), 'omitnan');
total_oxygen_fullBGC = sum(full_oxygen_model(:) .* dVt(:), 'omitnan');

fprintf('Global Total Oxygen Inventory (WOA): %.3e mmol\n', total_oxygen_WOA);
fprintf('Global Total Oxygen Inventory (Optimized Model): %.3e mmol\n', total_oxygen_optimized);
fprintf('Global Total Oxygen Inventory (Full BGC Model): %.3e mmol\n', total_oxygen_fullBGC);

% Compute Volume-Weighted MSE
mse_fullBGC = sum(dVt_norm .* (full_oxygen_vec - O2_WOA_vec).^2, 'omitnan');
mse_optimized = sum(dVt_norm .* (dO_vec - O2_WOA_vec).^2, 'omitnan');

fprintf('Global Weighted MSE (Full BGC Model): %.3e\n', mse_fullBGC);
fprintf('Global Weighted MSE (Optimized Model): %.3e\n', mse_optimized);
% fprintf('Relative Improvement in MSE: %.2f%%\n', relative_mse_improvement);

% Compute Depth-Specific Weighted Correlations and MSE
depth_weighted_corr_optimized = zeros(num_depths, 1);
depth_mse_optimized = zeros(num_depths, 1);
depth_mse_fullBGC = zeros(num_depths, 1);

for i = 1:num_depths
    woa_data = O2_WOA_regrid_mn(:, :, depth_indices(i));
    optimized_data = dO(:, :, depth_indices(i));
    full_data = full_oxygen_model(:, :, depth_indices(i));
    dVt_layer = dVt(:, :, depth_indices(i));

    % Flatten into vectors
    woa_vec = woa_data(:);
    opt_vec = optimized_data(:);
    full_vec = full_data(:);
    dVt_vec = dVt_layer(:);

    % Normalize volume weights
    dVt_norm = dVt_vec / sum(dVt_vec, 'omitnan');

    % Compute weighted means
    mean_woa = sum(dVt_norm .* woa_vec, 'omitnan');
    mean_opt = sum(dVt_norm .* opt_vec, 'omitnan');
    mean_full = sum(dVt_norm .* full_vec, 'omitnan');

    % Compute weighted standard deviations
    std_woa = sqrt(sum(dVt_norm .* (woa_vec - mean_woa).^2, 'omitnan'));
    std_opt = sqrt(sum(dVt_norm .* (opt_vec - mean_opt).^2, 'omitnan'));
    std_full = sqrt(sum(dVt_norm .* (full_vec - mean_full).^2, 'omitnan'));

    % Compute weighted correlation
    depth_weighted_corr_optimized(i) = sum(dVt_norm .* ((woa_vec - mean_woa) .* (opt_vec - mean_opt)), 'omitnan') / (std_woa * std_opt);

    % Compute weighted MSE
    depth_mse_fullBGC(i) = sum(dVt_norm .* (full_vec - woa_vec).^2, 'omitnan');
    depth_mse_optimized(i) = sum(dVt_norm .* (opt_vec - woa_vec).^2, 'omitnan');

    % fprintf('Depth: %d m - Weighted Corr (WOA vs Optimized Model): %.3f\n', depths(i), depth_weighted_corr_optimized(i));
    % fprintf('Depth: %d m - Weighted MSE (Full BGC Model): %.3e\n', depths(i), depth_mse_fullBGC(i));
    % fprintf('Depth: %d m - Weighted MSE (Optimized Model): %.3e\n', depths(i), depth_mse_optimized(i));

    % Compute and print relative MSE improvement for each depth
    relative_mse_improvement_depth = ((depth_mse_fullBGC(i) - depth_mse_optimized(i)) / depth_mse_fullBGC(i)) * 100;
    % fprintf('Depth: %d m - Relative Improvement in MSE: %.2f%%\n', depths(i), relative_mse_improvement_depth);
end


    woa_data = O2_WOA_regrid_mn(:, :, depth_indices(i));
    optimized_data = dO(:, :, depth_indices(i));
    full_data = full_oxygen_model(:, :, depth_indices(i));
    dVt_layer = dVt(:, :, depth_indices(i));

    % Flatten into vectors
    woa_vec = woa_data(:);
    opt_vec = optimized_data(:);
    full_vec = full_data(:);
    dVt_vec = dVt_layer(:);

end

%% Compute Additional Error Metrics
for i = 1
% Normalize volume weights
dVt_norm = dVt; dVt_norm(~iwet) = NaN;
dVt_norm = dVt_norm(:) / sum(dVt_norm(:), 'omitnan');
mae_fullBGC = sum(dVt_norm .* abs(full_oxygen_vec - O2_WOA_vec), 'omitnan');
mae_optimized = sum(dVt_norm .* abs(dO_vec - O2_WOA_vec), 'omitnan');

rmse_fullBGC = sqrt(sum(dVt_norm .* (full_oxygen_vec - O2_WOA_vec).^2, 'omitnan'));
rmse_optimized = sqrt(sum(dVt_norm .* (dO_vec - O2_WOA_vec).^2, 'omitnan'));

bias_fullBGC = sum(dVt_norm .* (full_oxygen_vec - O2_WOA_vec), 'omitnan');
bias_optimized = sum(dVt_norm .* (dO_vec - O2_WOA_vec), 'omitnan');

nmb_fullBGC = (sum(full_oxygen_vec - O2_WOA_vec, 'omitnan') / sum(O2_WOA_vec, 'omitnan')) * 100;
nmb_optimized = (sum(dO_vec - O2_WOA_vec, 'omitnan') / sum(O2_WOA_vec, 'omitnan')) * 100;

fprintf('Global MAE (Full BGC Model): %.3f mmol/m^3\n', mae_fullBGC);
fprintf('Global MAE (Optimized Model): %.3f mmol/m^3\n', mae_optimized);
fprintf('Global RMSE (Full BGC Model): %.3f mmol/m^3\n', rmse_fullBGC);
fprintf('Global RMSE (Optimized Model): %.3f mmol/m^3\n', rmse_optimized);
fprintf('Global Bias (Full BGC Model): %.3f mmol/m^3\n', bias_fullBGC);
fprintf('Global Bias (Optimized Model): %.3f mmol/m^3\n', bias_optimized);
fprintf('Global NMB (Full BGC Model): %.2f%%\n', nmb_fullBGC);
fprintf('Global NMB (Optimized Model): %.2f%%\n', nmb_optimized);

% Compute Depth-Specific Metrics
for i = 1:num_depths
    woa_data = O2_WOA_regrid_mn(:, :, depth_indices(i));
    optimized_data = dO(:, :, depth_indices(i));
    full_data = full_oxygen_model(:, :, depth_indices(i));
    dVt_layer = dVt(:, :, depth_indices(i));

    woa_vec = woa_data(:);
    opt_vec = optimized_data(:);
    full_vec = full_data(:);
    dVt_vec = dVt_layer(:);
    dVt_norm = dVt_vec / sum(dVt_vec, 'omitnan');

    mae_fullBGC_depth = sum(dVt_norm .* abs(full_vec - woa_vec), 'omitnan');
    mae_optimized_depth = sum(dVt_norm .* abs(opt_vec - woa_vec), 'omitnan');

    rmse_fullBGC_depth = sqrt(sum(dVt_norm .* (full_vec - woa_vec).^2, 'omitnan'));
    rmse_optimized_depth = sqrt(sum(dVt_norm .* (opt_vec - woa_vec).^2, 'omitnan'));

    bias_fullBGC_depth = sum(dVt_norm .* (full_vec - woa_vec), 'omitnan');
    bias_optimized_depth = sum(dVt_norm .* (opt_vec - woa_vec), 'omitnan');

    nmb_fullBGC_depth = (sum(full_vec - woa_vec, 'omitnan') / sum(woa_vec, 'omitnan')) * 100;
    nmb_optimized_depth = (sum(opt_vec - woa_vec, 'omitnan') / sum(woa_vec, 'omitnan')) * 100;
    % 
    % fprintf('Depth: %d m - MAE (Full BGC): %.3f mmol/m^3\n', depths(i), mae_fullBGC_depth);
    % fprintf('Depth: %d m - MAE (Optimized Model): %.3f mmol/m^3\n', depths(i), mae_optimized_depth);
    % fprintf('Depth: %d m - RMSE (Full BGC): %.3f mmol/m^3\n', depths(i), rmse_fullBGC_depth);
    % fprintf('Depth: %d m - RMSE (Optimized Model): %.3f mmol/m^3\n', depths(i), rmse_optimized_depth);
    % fprintf('Depth: %d m - Bias (Full BGC): %.3f mmol/m^3\n', depths(i), bias_fullBGC_depth);
    % fprintf('Depth: %d m - Bias (Optimized Model): %.3f mmol/m^3\n', depths(i), bias_optimized_depth);
    % fprintf('Depth: %d m - NMB (Full BGC): %.2f%%\n', depths(i), nmb_fullBGC_depth);
    % fprintf('Depth: %d m - NMB (Optimized Model): %.2f%%\n', depths(i), nmb_optimized_depth);
end

end

%% CRR and Carbon Flux Export (Model, Full Model & WOA)
for i = 1
load('OUR_WOA_tf.mat');% OUR is Modeled Oxygen Utilization Rate 
OUR_WOA = OUR_WOA_tf; % (mmol/m^3/yr)

isdry = find(msk(:) == 0); OUR_WOA(isdry) = NaN;
OUR_WOA(OUR_WOA < 0) = 0; %save only oxygen utilization (consumption)

TF = isoutlier(OUR_WOA(:)); 
OUR_WOA(TF) = NaN;

ratio_O_C = 1.34; % Redfield ratio of -O2: C organic C (mol O2 per mol C)
mol_C_per_mol_O2 = 1 / ratio_O_C; % mol C per mol O2

% Compute Carbon Remineralization Rate
CRR = OUR * mol_C_per_mol_O2 * spa; % mmol C / m^3 year

% Compute CRR for WOA
CRR_WOA = OUR_WOA * mol_C_per_mol_O2; % mmol C / m^3 year

% Global Integrated Carbon Export 
dVt(isdry) = NaN; 
CRR_sum = sum(CRR(iwet).* dVt(iwet),'omitnan'); 
CRR_sum = CRR_sum / 1000  * 12 / (10^15); % mmol/yr to Pg C /yr, 1 mol C: 12 g C
CRR_sum % This value = ANCP (?)

% Ensuring only layers below 100m if z_ref is shallower
dVt2 = dVt; dVt2(~iwet) = 0;
CRR_sum100 = CRR(:,:,4:end).*dVt2(:,:,4:end);
CRR_sum100 = sum(CRR_sum100(:),'omitnan'); 
CRR_sum100 = CRR_sum100 / 1000  * 12 / (10^15) % mmol/yr to Pg C /yr, 1 mol C: 12 g C

CRR_WOA(isnan(CRR_WOA)) = 0;
CRR_WOA_sum = sum(CRR_WOA(iwet).* dVt(iwet),'omitnan'); 
CRR_WOA_sum = CRR_WOA_sum * 12 / 1000 / (10^15) % mmol/yr to Pg C /yr, 1 mol C: 12 g C

% Compute carbon flux by depth level
CRR_mmol_yr = CRR .* dVt; % mmol/ yr
CRR_mmol_yr(isnan(CRR_mmol_yr)) = 0; % Set NaNs to zeros

% version 1: my function
flux_model = bottomup_coi(CRR_mmol_yr);

% version 2: matlab functions
CRR_mmol_yr = flip(CRR_mmol_yr,3);
flux_Pg_C_model = cumsum(CRR_mmol_yr,[3],'omitnan');
flux_Pg_C_model = flip(flux_Pg_C_model,3);

%mol C / m^2 / yr for comparison with reccap
flux_model = flux_model / 1000;
flux_model = flux_model ./ dAt;
flux_molC_m2_yr = flux_Pg_C_model / 1000;
flux_molC_m2_yr = flux_molC_m2_yr ./ dAt;

flux_molC_m2_yr(isdry) = NaN;
flux_model(isdry) = NaN;

end

%% Save results for each optimization/model version to table

% Model_Configuration = ["CTRL";"RESP"; "RESP_NPP"; "RESP_PROD";"FullBGC"];
ANCP = CRR_sum;
F100 = CRR_sum100;
hierarchy_table_v2 = [par.A; par.b; par.z_ref; NaN; NaN; total_oxygen_optimized;weighted_corr_optimized; mse_optimized; mae_optimized; rmse_optimized; bias_optimized; nmb_optimized; ANCP; F100];
%save('hierarchy_table_v2.mat','hierarchy_table_v2');


%% Functions

function [flux_model] = bottomup_coi(CRR_mmol_yr)
% bottomup_coi: Computes the depth-integrated carbon export flux through a
% water column
% 
%
% This function integrates the Carbon Remineralization Rate (CRR) from the 
% deepest ocean layer upward, resulting in the carbon export flux at each depth.
%
% Input:
%   CRR_mmol_yr - 3D array (m x n x p) of Carbon Remineralization Rate 
%                 in mmol C/m^3/year, where p represents depth levels.
%
% Output:
%   flux_model  - 3D array (m x n x p) of cumulative carbon export flux 
%                 (mmol C/m^3/year), computed from the bottom upward.
%
% Notes:
% - The flux at each depth level includes all remineralization occurring below it.
% - The flux at the deepest layer is equal to the local CRR value.
% - The summation proceeds upward, accumulating flux contributions.

    % Get the dimensions of the input CRR array
    [m, n, p] = size(CRR_mmol_yr);
    
    % Initialize flux_model array with zeros
    flux_model = zeros(m, n, p); 

    % Set the bottom boundary condition (deepest layer flux equals local CRR)
    flux_model(:,:,end) = CRR_mmol_yr(:,:,end);

    % Compute cumulative flux moving upward through the depth levels
    for k = p-1:-1:1 % Iterate from the second-to-last layer to the surface
        flux_model(:,:,k) = flux_model(:,:,k+1) + CRR_mmol_yr(:,:,k);
    end
end

function [f, f_remin, J] = O2_model_with_remin(par)
% O2simple_with_remin2: Computes air-sea oxygen fluxes, remineralization, 
% and the Jacobian matrix for ocean oxygen transport.
%
% Inputs:
%   par - A structure containing grid information, parameters, and transport terms.
%
% Outputs:
%   f       - Air-sea flux term (oxygen flux at the surface).
%   f_remin - Oxygen consumption due to remineralization at each depth.
%   J       - Combined flux including transport, gas exchange, and remineralization.
%
% Notes:
% - Remineralization follows a power-law function with depth.
% - The function assumes remineralization occurs below a reference depth (z_ref).
% - The Jacobian matrix (J) accounts for oxygen transport, air-sea exchange, and remineralization.

    % Compute air-sea gas exchange parameters (KO2: gas transfer velocity, o2sat: oxygen saturation)
    [KO2, o2sat] = Fsea2air_v2(par); 
    
    % Extract grid information
    dzt = par.grd.dzt; % Layer thickness at each depth
    zt = -par.grd.zt;  % Convert depth to negative values (below surface)
    zw = -par.zw;      % Convert interface depths to negative values
    iwet = par.iwet;   % Index of wet grid points (ocean cells)
    
    % Remineralization parameters
    z_ref = par.z_ref; % Reference depth where remineralization starts
    b = par.b;         % Exponent for power-law remineralization
    A = par.A;         % Scaling constant for remineralization flux

    % Extend zw to include the bottom layer
    zw(end + 1) = zw(end) - dzt(end); 
    
    % Compute remineralization flux (positive upward, meaning loss of oxygen)
    j_z = -A * (zw / z_ref).^(-b); % Power-law remineralization flux

    % Remove the first value (infinity at zw = 0) and add zero at the bottom
    j_z(1) = []; 
    j_z(end + 1) = 0; 
    
    % Compute remineralization rate R_z as the convergence of the flux j_z
    R_z = -((j_z(1:end-1) - j_z(2:end)) ./ dzt); % Discrete derivative

    % Grid size
    [ny, nx, nz] = size(par.msk); 
    
    % Reshape R_z to be a globally constant field
    R_z = reshape(R_z, [1 1 nz]); 
    R_z = repmat(R_z, [ny, nx, 1]); 

    % Apply remineralization only below the reference depth
    i_above_zo = find(zt > z_ref); 
    R_z(:,:,i_above_zo) = 0; 

    % Compute the Jacobian matrix J including transport, gas exchange, and remineralization
    J = par.TRdiv + KO2 + d0(R_z(iwet)); 

    % Compute the air-sea oxygen flux (f) as KO2 * oxygen saturation
    f = KO2 * o2sat; 

    % Oxygen loss due to remineralization
    f_remin = R_z; 
end


function mse = oxygen_model_optim(params, par, O2_WOA_regrid_mn, iwet)
    % Unpack parameters
    b = params(1);
    A = params(2);
    z_ref = params(3);
    
    % Update par structure
    par.b = b;
    par.A = A;
    par.z_ref = z_ref;
    
    % Compute modeled oxygen field
    [f, ~, J] = O2_model_with_remin(par);

    dO = par.msk + NaN;
    dO(iwet) = J \ f; % Solve linear system
    
    % Compute MSE
    diff = dO(iwet) - O2_WOA_regrid_mn(iwet);
    mse = mean(diff.^2, 'omitnan');
end
